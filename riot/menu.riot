<menu class="tst">

<div class="control has-icons-left has-icons-right boite">
      <div class="columns">
      <input id="input" class="column input is-3-quarter" type="text" placeholder="  Formation" onkeyup={() => search()}><button class="column" disabled ={!back} onclick={() => Back() }  ><</button>
      </div>
      <span class="icon is-left">
       
        <i class="fas fa-search"></i>
      </span>
    </div>
  <div class="column is-half box level-left cube">
    
    <ul class="menu-list">
  
      <li each={item in items}>
        <div class="columns m-2">
          <a onclick={deep === 1 ? () => {this.Fill_List_With_Form_detailled(item.name);this.subsrch();} : deep === 2 ? () => {Fill_With_Libelle_form(item.name);this.subsrch();}: deep === 3 ? () => {this.props.SendForm(this.last_libelle,item.name,item.count);this.addtoPath(item.name,2);this.subsrch(); }: null} class="column">{item.name}</a>
          <span class="button is-primary ">{item.count}</span>
        </div>
      </li>
  
    </ul>
<style>
.cube{
  margin:12px;
  display:block;
    height: calc(100vh - 100px);
    width:400px !important;
    overflow: auto;
}

.boite{
  width:400px;
}

.tst{
  margin:0;
  padding:0;
}

</style>
    <script>
  export default {
    
      items: [], 
      items2: [],
      back : false ,
      deep : 1,
      last_form_clicked:"",
      last_libelle:"",
      path : [],
    onMounted() {
     
      this.props.UpdatePath(this.path)
      this.Fill_List_With_Form() 

    },
    
    subsrch(){
      document.getElementById('input').value = ''
    },
    
    refresh(){
      if(this.deep == 1){
        this.Fill_List_With_Form()
        this.update()
      }

      if(this.deep == 2){
        this.Fill_List_With_Form_detailled(this.last_form_clicked) 
        this.update()
      }

      if(this.deep == 3){
        this.Fill_With_Libelle_form(this.last_libelle)
        this.update()
      }
    },

    search(){
      this.refresh()
      this.items2 = []
      var searchString = document.getElementById("input").value;
      srch = searchString
      if(srch != ""){
      for(let i = 0 ; i < this.items.length ; i += 1 ){
        if(this.items[i]["name"].toLowerCase().includes(srch.toLowerCase())){
         this.items2.push(this.items[i])
         console.log(this.items[i]["name"])
        }
      }
      this.items = this.items2
      this.update()
    }else{
      this.refresh()
    }
    },


    Back(){

      if(this.deep == 2){
        this.Fill_List_With_Form() 
        this.deep = 1
        this.update()
        this.removeFromPath()
        this.removeFromPath()
        console.log("deep 2")
      }


       else if(this.deep == 3){
        this.Fill_List_With_Form_detailled(this.last_form_clicked) 
        this.deep = 2
        this.update()
        this.props.SendForm("")
        this.removeFromPath()
        this.removeFromPath()
        console.log("deep 3")
      }
      this.subsrch()


    },


    async Fill_List_With_Form() {

    this.items = []
      
      this.back = false
      if(!localStorage.getItem("tab_form")){
              try {
                const response = await fetch('https://data.enseignementsup-recherche.gouv.fr/api/records/1.0/search/?dataset=fr-esr-parcoursup&q=&rows=100&facet=fili&timezone=Europe%2FBerlin');
                const data = await response.json();
                this.items = data.facet_groups[0]["facets"];
                localStorage.setItem('tab_form',JSON.stringify(this.items))
                this.update()
              } catch (error) {
                console.error(error);
              }
      }else{
        this.items = JSON.parse(localStorage.getItem('tab_form'))
        this.update()
      }
    },


    async Fill_List_With_Form_detailled(name_form){

    this.items = []

        console.log(name_form)
        this.addtoPath(name_form,0)
        this.last_form_clicked = name_form
            if(!localStorage.getItem(name_form)){
                    try {
                      this.back = true
                      this.items = []
                      
                        const response = await fetch('https://data.enseignementsup-recherche.gouv.fr/api/records/1.0/search/?dataset=fr-esr-parcoursup&q=&rows=400&start=0&facet=fili&facet=form_lib_voe_acc&refine.fili='+encodeURIComponent(name_form)+'&timezone=Europe%2FBerlin')
                        const data = await response.json()
                        this.items= data.facet_groups[1].facets
                         localStorage.setItem(name_form,JSON.stringify(this.items))                          
                        this.deep = 2
                        this.update()
                      } catch (error) {
                        console.error(error);
                      }
           }else{
            this.back = true
           this.deep = 2    
        this.items = JSON.parse(localStorage.getItem(name_form))
        this.update()
      }
    },
    async Fill_With_Libelle_form(name_form){

      this.last_libelle = name_form
      this.items = []
        console.log(name_form)
        this.addtoPath(name_form,1)
            if(!localStorage.getItem(name_form)){
                    try {                 
                      this.items = []
                        const response = await fetch('https://data.enseignementsup-recherche.gouv.fr/api/records/1.0/search/?dataset=fr-esr-parcoursup&q=&rows=400&start=0&facet=form_lib_voe_acc&facet=fil_lib_voe_acc&refine.form_lib_voe_acc='+encodeURIComponent(name_form)+'&timezone=Europe%2FBerlin')
                        const data = await response.json()
                        this.items= data.facet_groups[1].facets
                         localStorage.setItem(name_form,JSON.stringify(this.items))
                        this.deep = 3
                        this.update()
                      } catch (error) {
                        console.error(error);
                      }
           }else{  
           this.deep = 3   
        this.items = JSON.parse(localStorage.getItem(name_form))
        this.update()
      }
    },

    addtoPath(e,rank){

      this.path[rank]= e
      this.props.UpdatePath(this.path)

    },

    removeFromPath(){
      this.path.pop()
      this.props.UpdatePath(this.path)

    }

  }
</script>
</menu>
